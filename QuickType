namespace QuickType
    {
        using System;
        using System.Collections.Generic;

        using System.Globalization;
        using Newtonsoft.Json;
        using Newtonsoft.Json.Converters;

        public partial class Welcome
        {
            [JsonProperty("queryCost")]
            public long QueryCost { get; set; }

            [JsonProperty("latitude")]
            public double Latitude { get; set; }

            [JsonProperty("longitude")]
            public double Longitude { get; set; }

            [JsonProperty("resolvedAddress")]
            public string ResolvedAddress { get; set; }

            [JsonProperty("address")]
            public string Address { get; set; }

            [JsonProperty("timezone")]
            public string Timezone { get; set; }

            [JsonProperty("tzoffset")]
            public long Tzoffset { get; set; }

            [JsonProperty("description")]
            public string Description { get; set; }

            [JsonProperty("days")]
            public List<CurrentConditions> Days { get; set; }

            [JsonProperty("alerts")]
            public List<object> Alerts { get; set; }

            [JsonProperty("stations")]
            public Dictionary<string, Station> Stations { get; set; }

            [JsonProperty("currentConditions")]
            public CurrentConditions CurrentConditions { get; set; }
        }

        public partial class CurrentConditions
        {
            [JsonProperty("datetime")]
            public DateTimeOffset Datetime { get; set; }

            [JsonProperty("datetimeEpoch")]
            public long DatetimeEpoch { get; set; }

            [JsonProperty("temp")]
            public double Temp { get; set; }

            [JsonProperty("feelslike")]
            public double Feelslike { get; set; }

            [JsonProperty("humidity")]
            public double Humidity { get; set; }

            [JsonProperty("dew")]
            public double Dew { get; set; }

            [JsonProperty("precip")]
            public long Precip { get; set; }

            [JsonProperty("precipprob")]
            public long Precipprob { get; set; }

            [JsonProperty("snow")]
            public long Snow { get; set; }

            [JsonProperty("snowdepth")]
            public double Snowdepth { get; set; }

            [JsonProperty("preciptype")]
            public object Preciptype { get; set; }

            [JsonProperty("windgust")]
            public double? Windgust { get; set; }

            [JsonProperty("windspeed")]
            public double Windspeed { get; set; }

            [JsonProperty("winddir")]
            public double Winddir { get; set; }

            [JsonProperty("pressure")]
            public double Pressure { get; set; }

            [JsonProperty("visibility")]
            public double Visibility { get; set; }

            [JsonProperty("cloudcover")]
            public double Cloudcover { get; set; }

            [JsonProperty("solarradiation")]
            public double Solarradiation { get; set; }

            [JsonProperty("solarenergy")]
            public double? Solarenergy { get; set; }

            [JsonProperty("uvindex")]
            public long Uvindex { get; set; }

            [JsonProperty("conditions")]
            public string Conditions { get; set; }

            [JsonProperty("icon")]
            public string Icon { get; set; }

            [JsonProperty("stations")]
            public List<string> Stations { get; set; }

            [JsonProperty("source")]
            public string Source { get; set; }

            [JsonProperty("sunrise", NullValueHandling = NullValueHandling.Ignore)]
            public DateTimeOffset? Sunrise { get; set; }

            [JsonProperty("sunriseEpoch", NullValueHandling = NullValueHandling.Ignore)]
            public long? SunriseEpoch { get; set; }

            [JsonProperty("sunset", NullValueHandling = NullValueHandling.Ignore)]
            public DateTimeOffset? Sunset { get; set; }

            [JsonProperty("sunsetEpoch", NullValueHandling = NullValueHandling.Ignore)]
            public long? SunsetEpoch { get; set; }

            [JsonProperty("moonphase", NullValueHandling = NullValueHandling.Ignore)]
            public double? Moonphase { get; set; }

            [JsonProperty("tempmax", NullValueHandling = NullValueHandling.Ignore)]
            public long? Tempmax { get; set; }

            [JsonProperty("tempmin", NullValueHandling = NullValueHandling.Ignore)]
            public long? Tempmin { get; set; }

            [JsonProperty("feelslikemax", NullValueHandling = NullValueHandling.Ignore)]
            public long? Feelslikemax { get; set; }

            [JsonProperty("feelslikemin", NullValueHandling = NullValueHandling.Ignore)]
            public double? Feelslikemin { get; set; }

            [JsonProperty("precipcover", NullValueHandling = NullValueHandling.Ignore)]
            public long? Precipcover { get; set; }

            [JsonProperty("severerisk", NullValueHandling = NullValueHandling.Ignore)]
            public long? Severerisk { get; set; }

            [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
            public string Description { get; set; }

            [JsonProperty("hours", NullValueHandling = NullValueHandling.Ignore)]
            public List<CurrentConditions> Hours { get; set; }
        }

        public partial class Station
        {
            [JsonProperty("distance")]
            public long Distance { get; set; }

            [JsonProperty("latitude")]
            public double Latitude { get; set; }

            [JsonProperty("longitude")]
            public double Longitude { get; set; }

            [JsonProperty("useCount")]
            public long UseCount { get; set; }

            [JsonProperty("id")]
            public string Id { get; set; }

            [JsonProperty("name")]
            public string Name { get; set; }

            [JsonProperty("quality")]
            public long Quality { get; set; }

            [JsonProperty("contribution")]
            public long Contribution { get; set; }
        }

        public partial class Welcome
        {
            public static Welcome FromJson(string json) => JsonConvert.DeserializeObject<Welcome>(json, QuickType.Converter.Settings);
        }

        public static class Serialize
        {
            public static string ToJson(this Welcome self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
        }

        internal static class Converter
        {
            public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
            {
                MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
                DateParseHandling = DateParseHandling.None,
                Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
            };
        }
    }
